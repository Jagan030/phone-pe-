
import pandas as pd
import mysql.connector
import mysql.connector as sql
import streamlit as st
import plotly.express as px
import os
import json
from PIL import Image
import git
from git.repo.base import Repo
import requests
import json


#repo_url = "https://github.com/PhonePe/pulse.git"
#local_path ="C:/Users/DELL/Phonepe data/data"
#git.Repo.clone_from(repo_url, local_path)

import os
import json
import pandas as pd

# Define the path to the directory containing the aggregated transaction data:
path1 ="C:/Users/DELL/Phonepe_data/data/data/aggregated/transaction/country/india/state/"
#Get the list of directories inside the specified path:
agg_trans_list = os.listdir(path1)# The os.listdir() function returns a list of all the items (directories and files) present in the specified directory.


#Create an empty dictionary to store the data:
columns1 = {'State':[] , 'Year':[] , 'Quarter':[] , 'Transaction_type':[] , 'Transaction_count':[] , 'Transaction_amount':[]} #This dictionary, named columns1, will be used to collect the extracted data.

#Iterate over the directories in agg_trans_list:
for state in agg_trans_list:
    cur_state = path1 + state + "/"        # This loop iterates over each directory in agg_trans_list and concatenates the current state directory's path to the cur_state variable.
    
    if not os.path.isdir(cur_state):
        continue
    
    agg_year_list = os.listdir(cur_state)
    
    for year in agg_year_list:
        cur_year = cur_state + year + "/"
       
        if not os.path.isdir(cur_year):
            continue
       
        agg_file_list = os.listdir(cur_year)
        
        for file in agg_file_list:
            cur_file = cur_year + file 
            
            if not os.path.isfile(cur_file):
                continue
                
                
            #Open and read the JSON file:
            data = open(cur_file,'r')
            A = json.load(data)
            
            #Extract the relevant information from the JSON data and append it to the columns1 dictionary:
            for i in A['data']['transactionData']:
                name = i['name']
                count = i['paymentInstruments'][0]['count']
                amount = i['paymentInstruments'][0]['amount']
                columns1['Transaction_type'].append(name)
                columns1['Transaction_count'].append(count)
                columns1['Transaction_amount'].append(amount)
                columns1['State'].append(state)
                columns1['Year'].append(year)
                columns1['Quarter'].append(int(file.strip('.json')))
                
df_agg_trans = pd.DataFrame(columns1)              
df_agg_trans.shape      

df = df_agg_trans
print(df_agg_trans.columns)

print(df.isnull().sum())
path2 =  "C:/Users/DELL/Phonepe_data/data/data/aggregated/user/country/india/state/"

agg_user_list = os.listdir(path2)

columns2 = {'State': [], 'Year': [], 'Quarter': [], 'Brands': [], 'Count': [],
            'Percentage': []}
for state in agg_user_list:
    cur_state = path2 + state + "/"
    agg_year_list = os.listdir(cur_state)
    
    for year in agg_year_list:
        cur_year = cur_state + year + "/"
        agg_file_list = os.listdir(cur_year)

        for file in agg_file_list:
            cur_file = cur_year + file
            data = open(cur_file, 'r')
            B = json.load(data)
            try:
                for i in B["data"]["usersByDevice"]:
                    brand_name = i["brand"]
                    counts = i["count"]
                    percents = i["percentage"]
                    columns2["Brands"].append(brand_name)
                    columns2["Count"].append(counts)
                    columns2["Percentage"].append(percents)
                    columns2["State"].append(state)
                    columns2["Year"].append(year)
                    columns2["Quarter"].append(int(file.strip('.json')))
            except:
                pass
             
df_agg_user = pd.DataFrame(columns2)
print(df_agg_user.columns)
print(df_agg_user)


df2 = df_agg_user
print(df2.isnull().sum())




path3 = "C:/Users/DELL/Phonepe_data/data/data/map/transaction/hover/country/india/state/"

map_trans_list = os.listdir(path3)

columns3 = {'State': [], 'Year': [], 'Quarter': [], 'District': [], 'Count': [],
            'Amount': []}

for state in map_trans_list:
    cur_state = path3 + state + "/"
    map_year_list = os.listdir(cur_state)
    
    for year in map_year_list:
        cur_year = cur_state + year + "/"
        map_file_list = os.listdir(cur_year)
        
        for file in map_file_list:
            cur_file = cur_year + file
            data = open(cur_file, 'r')
            C = json.load(data)
            
            for i in C["data"]["hoverDataList"]:
                district = i["name"]
                count = i["metric"][0]["count"]
                amount = i["metric"][0]["amount"]
                columns3["District"].append(district)
                columns3["Count"].append(count)
                columns3["Amount"].append(amount)
                columns3['State'].append(state)
                columns3['Year'].append(year)
                columns3['Quarter'].append(int(file.strip('.json')))
                
df_map_trans = pd.DataFrame(columns3)

print(df_map_trans)

df3 = df_map_trans

# Count the number of null values in each column
print(df3.isnull().sum())
print(df_map_trans.columns)




# For Dataframe of map user

path4 = "C:/Users/DELL/Phonepe_data/data/data/map/user/hover/country/india/state/"

map_user_list = os.listdir(path4)

columns4 = {"State": [], "Year": [], "Quarter": [], "District": [],
            "RegisteredUser": [], "AppOpens": []}

for state in map_user_list:
    cur_state = path4 + state + "/"
    map_year_list = os.listdir(cur_state)
    
    for year in map_year_list:
        cur_year = cur_state + year + "/"
        map_file_list = os.listdir(cur_year)
        
        for file in map_file_list:
            cur_file = cur_year + file
            data = open(cur_file, 'r')
            D = json.load(data)
            
            for i in D["data"]["hoverData"].items():
                district = i[0]
                registereduser = i[1]["registeredUsers"]
                appOpens = i[1]['appOpens']
                columns4["District"].append(district)
                columns4["RegisteredUser"].append(registereduser)
                columns4["AppOpens"].append(appOpens)
                columns4['State'].append(state)
                columns4['Year'].append(year)
                columns4['Quarter'].append(int(file.strip('.json')))
                
df_map_user = pd.DataFrame(columns4)

print(df_map_user)
print(df_map_user.columns)

path5 = "C:/Users/DELL/Phonepe_data/data/data/top/transaction/country/india/state/"

top_trans_list = os.listdir(path5)
columns5 = {'State': [], 'Year': [], 'Quarter': [], 'Pincode': [], 'Transaction_count': [],
            'Transaction_amount': []}

for state in top_trans_list:
    cur_state = path5 + state + "/"
    top_year_list = os.listdir(cur_state)
    
    for year in top_year_list:
        cur_year = cur_state + year + "/"
        top_file_list = os.listdir(cur_year)
        
        for file in top_file_list:
            cur_file = cur_year + file
            data = open(cur_file, 'r')
            E = json.load(data)
            
            for i in E['data']['pincodes']:
                name = i['entityName']
                count = i['metric']['count']
                amount = i['metric']['amount']
                columns5['Pincode'].append(name)
                columns5['Transaction_count'].append(count)
                columns5['Transaction_amount'].append(amount)
                columns5['State'].append(state)
                columns5['Year'].append(year)
                columns5['Quarter'].append(int(file.strip('.json')))
df_top_trans = pd.DataFrame(columns5)
            
print(df_top_trans)

print(df_top_trans.columns)



path6 = "C:/Users/DELL/Phonepe_data/data/data/top/user/country/india/state/"

top_user_list = os.listdir(path6)
columns6 = {'State': [], 'Year': [], 'Quarter': [], 'Pincode': [],
            'RegisteredUsers': []}

for state in top_user_list:
    cur_state = path6 + state + "/"
    top_year_list = os.listdir(cur_state)
    
    for year in top_year_list:
        cur_year = cur_state + year + "/"
        top_file_list = os.listdir(cur_year)
        
        for file in top_file_list:
            cur_file = cur_year + file
            data = open(cur_file, 'r')
            F = json.load(data)
            
            for i in F['data']['pincodes']:
                name = i['name']
                registeredUsers = i['registeredUsers']
                columns6['Pincode'].append(name)
                columns6['RegisteredUsers'].append(registeredUsers)
                columns6['State'].append(state)
                columns6['Year'].append(year)
                columns6['Quarter'].append(int(file.strip('.json')))
df_top_user = pd.DataFrame(columns6)         
print(df_top_user)
print(df_top_user.columns)



df_agg_trans.to_csv('agg_trans.csv',index=False)
df_agg_user.to_csv('agg_user.csv',index=False)
df_map_trans.to_csv('map_trans.csv',index=False)
df_map_user.to_csv('map_user.csv',index=False)
df_top_trans.to_csv('top_trans.csv',index=False)
df_top_user.to_csv('top_user.csv',index=False)




try:
    mydb = sql.connect(
        host="localhost",
        user="root",
        password="Jagan*1998",
        database="phonepe_data"
    )
    print("Connection established successfully!")
    
except mysql.connector.Error as error:  # Corrected exception name
    print("Error while connecting to MySQL:", error)

# Create a cursor object    
mycursor = mydb.cursor(buffered=True)



# Insert rows from DataFrame into the agg_trans table
insert_query = """
INSERT INTO agg_trans (State, Year, Quarter, Transaction_type, Transaction_count, Transaction_amount)
VALUES (%s, %s, %s, %s, %s, %s)
"""

for _, row in df_agg_trans.iterrows():
    data = (row['State'], row['Year'], row['Quarter'], row['Transaction_type'], row['Transaction_count'], row['Transaction_amount'])
    mycursor.execute(insert_query, data)
    
#The code uses a loop to iterate over the rows of the DataFrame df_agg_trans. The loop variable _ is used to ignore the index of the DataFrame, while row represents each row of the DataFrame.

# Commit the changes and close the connection
mydb.commit()


# 2 .Create the agg_user table
create_table_query = """
CREATE TABLE agg_user (
    State VARCHAR(100),
    Year INT,
    Quarter INT,
    Brands varchar(100),
    Count INT,
    Percentage DOUBLE
)
"""
mycursor.execute(create_table_query)
print("agg_user table created successfully!")




# Insert rows from DataFrame into the agg_trans table
insert_query = """
INSERT INTO agg_user (State, Year, Quarter, Brands, Count, Percentage)
VALUES (%s, %s, %s, %s, %s, %s)
"""

for _, row in df_agg_user.iterrows():
    data = (row['State'], row['Year'], row['Quarter'], row['Brands'], row['Count'], row['Percentage'])
    mycursor.execute(insert_query, data)
    
#The code uses a loop to iterate over the rows of the DataFrame df_agg_trans. The loop variable _ is used to ignore the index of the DataFrame, while row represents each row of the DataFrame.

# Commit the changes and close the connection
mydb.commit()




# 3 .Create the map_trans table
create_table_query = """
CREATE TABLE map_trans (
    State VARCHAR(100),
    Year INT,
    Quarter INT,
    District varchar(100),
    Count INT,
    Amount DOUBLE
)
"""
mycursor.execute(create_table_query)
print("map_trans table created successfully!")


# Insert rows from DataFrame into the map_trans table
insert_query = """
INSERT INTO map_trans (State, Year, Quarter, District, Count, Amount)
VALUES (%s, %s, %s, %s, %s, %s)
"""

for _, row in df_map_trans.iterrows():
    data = (row['State'], row['Year'], row['Quarter'], row['District'], row['Count'], row['Amount'])
    mycursor.execute(insert_query, data)
    
#The code uses a loop to iterate over the rows of the DataFrame df_agg_trans. The loop variable _ is used to ignore the index of the DataFrame, while row represents each row of the DataFrame.

# Commit the changes and close the connection
mydb.commit()




# 4 .Create the map_user table
create_table_query = """
CREATE TABLE map_user (
    State VARCHAR(100),
    Year INT,
    Quarter INT,
    District varchar(100),
    RegisteredUser INT,
    AppOpens INT
)
"""
mycursor.execute(create_table_query)
print("map_user table created successfully!")



print(df_map_user.columns)


# Insert rows from DataFrame into the map_user table
insert_query = """
INSERT INTO map_user (State, Year, Quarter, District, RegisteredUser, AppOpens)
VALUES (%s, %s, %s, %s, %s, %s)
"""

for _, row in df_map_user.iterrows():
    data = (row['State'], row['Year'], row['Quarter'], row['District'], row['RegisteredUser'], row['AppOpens'])
    mycursor.execute(insert_query, data)
    
#The code uses a loop to iterate over the rows of the DataFrame df_agg_trans. The loop variable _ is used to ignore the index of the DataFrame, while row represents each row of the DataFrame.

# Commit the changes and close the connection
mydb.commit()



# 5 .Create the top_trans table
create_table_query = """
CREATE TABLE top_trans (
    State VARCHAR(100),
    Year INT,
    Quarter INT,
    Pincode INT,
    Transaction_count INT,
    Transaction_amount DOUBLE
)
"""
mycursor.execute(create_table_query)
print("top_trans table created successfully!")


# Insert rows from DataFrame into the top_trans table
insert_query = """
INSERT INTO top_trans (State, Year, Quarter, Pincode, Transaction_count, Transaction_amount)
VALUES (%s, %s, %s, %s, %s, %s)
"""

for _, row in df_top_trans.iterrows():
    data = (row['State'], row['Year'], row['Quarter'], row['Pincode'], row['Transaction_count'], row['Transaction_amount'])
    mycursor.execute(insert_query, data)
    
#The code uses a loop to iterate over the rows of the DataFrame df_agg_trans. The loop variable _ is used to ignore the index of the DataFrame, while row represents each row of the DataFrame.

# Commit the changes and close the connection
mydb.commit()



print(df_top_user.columns)



# 6 .Create the top_user table
create_table_query = """
CREATE TABLE top_user (
    State VARCHAR(100),
    Year INT,
    Quarter INT,
    Pincode INT,
    RegisteredUsers INT
    )
"""
mycursor.execute(create_table_query)
print("top_user table created successfully!")



# Insert rows from DataFrame into the top_user table
insert_query = """
INSERT INTO top_user (State, Year, Quarter, Pincode, RegisteredUsers)
VALUES (%s, %s, %s, %s, %s)
"""

for _, row in df_top_user.iterrows():
    data = (row['State'], row['Year'], row['Quarter'], row['Pincode'], row['RegisteredUsers'])
    mycursor.execute(insert_query, data)
    
#The code uses a loop to iterate over the rows of the DataFrame df_agg_trans. The loop variable _ is used to ignore the index of the DataFrame, while row represents each row of the DataFrame.

# Commit the changes and close the connection
mydb.commit()

url = "https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson"
response = requests.get(url)
data1 = json.loads(response.content)

# Extract state names and sort them in alphabetical order
state_names = [feature['properties']['ST_NM'] for feature in data1['features']]
state_names.sort()
print(state_names)
